datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Employee {
  EmployeeID Int      @id @default(autoincrement())
  FirstName  String   @db.VarChar(50)
  LastName   String   @db.VarChar(50)
  BirthDate  DateTime @db.Date
  Position   String   @db.VarChar(50)
  Salary     Decimal  @db.Decimal(10, 2)
}

model News {
  NewID    Int    @id @default(autoincrement())
  Header   String @db.VarChar(50)
  Category String @db.VarChar(50)
  Text     String @db.VarChar(500)
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String    @db.VarChar(255)
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Resume {
  id               Int                @id @default(autoincrement())
  first_name       String
  last_name        String
  position         String
  specialization   String?
  skills           ResumeSkills[]
  workExperience   ResumeWorkExperience[]
  education        ResumeEducation[]
}

model Skills {
  id         Int               @id @default(autoincrement())
  skill_name String
  resumes    ResumeSkills[]
}

model WorkExperience {
  id              Int                  @id @default(autoincrement())
  work_period     DateTime?
  position        String?
  company         String?
  clients         String?
  project         String?
  team_members    String?
  project_role    String?
  completed_tasks String?
  environment     String?
  tools           String?
  technologies    String?
  resumes         ResumeWorkExperience[]
}

model Education {
  id               Int               @id @default(autoincrement())
  education_type   String?
  specialization   String?
  education_period DateTime?
  institution      String?
  resumes          ResumeEducation[]
}

model ResumeSkills {
  id        Int     @id @default(autoincrement())
  resume_id Int
  skill_id  Int
  resume    Resume  @relation(fields: [resume_id], references: [id])
  skill     Skills  @relation(fields: [skill_id], references: [id])

  @@unique([resume_id, skill_id])
}

model ResumeWorkExperience {
  id                Int            @id @default(autoincrement())
  resume_id         Int
  work_experience_id Int
  resume            Resume         @relation(fields: [resume_id], references: [id])
  work_experience   WorkExperience @relation(fields: [work_experience_id], references: [id])

  @@unique([resume_id, work_experience_id])
}

model ResumeEducation {
  id           Int        @id @default(autoincrement())
  resume_id    Int
  education_id Int
  resume       Resume     @relation(fields: [resume_id], references: [id])
  education    Education  @relation(fields: [education_id], references: [id])

  @@unique([resume_id, education_id])
}
